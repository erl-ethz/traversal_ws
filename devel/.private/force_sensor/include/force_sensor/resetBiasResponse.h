// Generated by gencpp from file force_sensor/resetBiasResponse.msg
// DO NOT EDIT!


#ifndef FORCE_SENSOR_MESSAGE_RESETBIASRESPONSE_H
#define FORCE_SENSOR_MESSAGE_RESETBIASRESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace force_sensor
{
template <class ContainerAllocator>
struct resetBiasResponse_
{
  typedef resetBiasResponse_<ContainerAllocator> Type;

  resetBiasResponse_()
    : reset_bias_response(false)  {
    }
  resetBiasResponse_(const ContainerAllocator& _alloc)
    : reset_bias_response(false)  {
  (void)_alloc;
    }



   typedef uint8_t _reset_bias_response_type;
  _reset_bias_response_type reset_bias_response;





  typedef boost::shared_ptr< ::force_sensor::resetBiasResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::force_sensor::resetBiasResponse_<ContainerAllocator> const> ConstPtr;

}; // struct resetBiasResponse_

typedef ::force_sensor::resetBiasResponse_<std::allocator<void> > resetBiasResponse;

typedef boost::shared_ptr< ::force_sensor::resetBiasResponse > resetBiasResponsePtr;
typedef boost::shared_ptr< ::force_sensor::resetBiasResponse const> resetBiasResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::force_sensor::resetBiasResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::force_sensor::resetBiasResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::force_sensor::resetBiasResponse_<ContainerAllocator1> & lhs, const ::force_sensor::resetBiasResponse_<ContainerAllocator2> & rhs)
{
  return lhs.reset_bias_response == rhs.reset_bias_response;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::force_sensor::resetBiasResponse_<ContainerAllocator1> & lhs, const ::force_sensor::resetBiasResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace force_sensor

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::force_sensor::resetBiasResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::force_sensor::resetBiasResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::force_sensor::resetBiasResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::force_sensor::resetBiasResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::force_sensor::resetBiasResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::force_sensor::resetBiasResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::force_sensor::resetBiasResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "728c6e7d68d536560608257d1f206ca8";
  }

  static const char* value(const ::force_sensor::resetBiasResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x728c6e7d68d53656ULL;
  static const uint64_t static_value2 = 0x0608257d1f206ca8ULL;
};

template<class ContainerAllocator>
struct DataType< ::force_sensor::resetBiasResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "force_sensor/resetBiasResponse";
  }

  static const char* value(const ::force_sensor::resetBiasResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::force_sensor::resetBiasResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool reset_bias_response\n"
;
  }

  static const char* value(const ::force_sensor::resetBiasResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::force_sensor::resetBiasResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.reset_bias_response);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct resetBiasResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::force_sensor::resetBiasResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::force_sensor::resetBiasResponse_<ContainerAllocator>& v)
  {
    s << indent << "reset_bias_response: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.reset_bias_response);
  }
};

} // namespace message_operations
} // namespace ros

#endif // FORCE_SENSOR_MESSAGE_RESETBIASRESPONSE_H

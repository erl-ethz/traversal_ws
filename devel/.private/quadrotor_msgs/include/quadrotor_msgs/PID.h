// Generated by gencpp from file quadrotor_msgs/PID.msg
// DO NOT EDIT!


#ifndef QUADROTOR_MSGS_MESSAGE_PID_H
#define QUADROTOR_MSGS_MESSAGE_PID_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>

namespace quadrotor_msgs
{
template <class ContainerAllocator>
struct PID_
{
  typedef PID_<ContainerAllocator> Type;

  PID_()
    : header()
    , proportional_term()
    , integrative_term()
    , derivative_term()  {
    }
  PID_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , proportional_term(_alloc)
    , integrative_term(_alloc)
    , derivative_term(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _proportional_term_type;
  _proportional_term_type proportional_term;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _integrative_term_type;
  _integrative_term_type integrative_term;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _derivative_term_type;
  _derivative_term_type derivative_term;





  typedef boost::shared_ptr< ::quadrotor_msgs::PID_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::quadrotor_msgs::PID_<ContainerAllocator> const> ConstPtr;

}; // struct PID_

typedef ::quadrotor_msgs::PID_<std::allocator<void> > PID;

typedef boost::shared_ptr< ::quadrotor_msgs::PID > PIDPtr;
typedef boost::shared_ptr< ::quadrotor_msgs::PID const> PIDConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::quadrotor_msgs::PID_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::quadrotor_msgs::PID_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::quadrotor_msgs::PID_<ContainerAllocator1> & lhs, const ::quadrotor_msgs::PID_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.proportional_term == rhs.proportional_term &&
    lhs.integrative_term == rhs.integrative_term &&
    lhs.derivative_term == rhs.derivative_term;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::quadrotor_msgs::PID_<ContainerAllocator1> & lhs, const ::quadrotor_msgs::PID_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace quadrotor_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::quadrotor_msgs::PID_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::quadrotor_msgs::PID_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::quadrotor_msgs::PID_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::quadrotor_msgs::PID_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::quadrotor_msgs::PID_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::quadrotor_msgs::PID_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::quadrotor_msgs::PID_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2e215d204eed4067287363f18b2c8af2";
  }

  static const char* value(const ::quadrotor_msgs::PID_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2e215d204eed4067ULL;
  static const uint64_t static_value2 = 0x287363f18b2c8af2ULL;
};

template<class ContainerAllocator>
struct DataType< ::quadrotor_msgs::PID_<ContainerAllocator> >
{
  static const char* value()
  {
    return "quadrotor_msgs/PID";
  }

  static const char* value(const ::quadrotor_msgs::PID_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::quadrotor_msgs::PID_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"\n"
"geometry_msgs/Vector3 proportional_term\n"
"geometry_msgs/Vector3 integrative_term\n"
"geometry_msgs/Vector3 derivative_term\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::quadrotor_msgs::PID_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::quadrotor_msgs::PID_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.proportional_term);
      stream.next(m.integrative_term);
      stream.next(m.derivative_term);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PID_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::quadrotor_msgs::PID_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::quadrotor_msgs::PID_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "proportional_term: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.proportional_term);
    s << indent << "integrative_term: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.integrative_term);
    s << indent << "derivative_term: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.derivative_term);
  }
};

} // namespace message_operations
} // namespace ros

#endif // QUADROTOR_MSGS_MESSAGE_PID_H

// Generated by gencpp from file mpc/MpcLog.msg
// DO NOT EDIT!


#ifndef MPC_MESSAGE_MPCLOG_H
#define MPC_MESSAGE_MPCLOG_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <geometry_msgs/Pose.h>
#include <geometry_msgs/Twist.h>
#include <quadrotor_msgs/ControlCommand.h>
#include <quadrotor_msgs/Trajectory.h>
#include <geometry_msgs/Wrench.h>
#include <geometry_msgs/Twist.h>

namespace mpc
{
template <class ContainerAllocator>
struct MpcLog_
{
  typedef MpcLog_<ContainerAllocator> Type;

  MpcLog_()
    : header()
    , pose()
    , velocity()
    , control_command_mpc()
    , horizon_trajectory()
    , execution_time(0.0)
    , preparation_time(0.0)
    , objective_function_value(0.0)
    , kkt_value(0.0)
    , solver_status(0)
    , external_wrench()
    , interaction(false)
    , sliding_x(false)
    , sliding_y(false)
    , sliding_yaw(false)
    , interaction_reference_velocity()  {
    }
  MpcLog_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , pose(_alloc)
    , velocity(_alloc)
    , control_command_mpc(_alloc)
    , horizon_trajectory(_alloc)
    , execution_time(0.0)
    , preparation_time(0.0)
    , objective_function_value(0.0)
    , kkt_value(0.0)
    , solver_status(0)
    , external_wrench(_alloc)
    , interaction(false)
    , sliding_x(false)
    , sliding_y(false)
    , sliding_yaw(false)
    , interaction_reference_velocity(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _pose_type;
  _pose_type pose;

   typedef  ::geometry_msgs::Twist_<ContainerAllocator>  _velocity_type;
  _velocity_type velocity;

   typedef  ::quadrotor_msgs::ControlCommand_<ContainerAllocator>  _control_command_mpc_type;
  _control_command_mpc_type control_command_mpc;

   typedef  ::quadrotor_msgs::Trajectory_<ContainerAllocator>  _horizon_trajectory_type;
  _horizon_trajectory_type horizon_trajectory;

   typedef double _execution_time_type;
  _execution_time_type execution_time;

   typedef double _preparation_time_type;
  _preparation_time_type preparation_time;

   typedef double _objective_function_value_type;
  _objective_function_value_type objective_function_value;

   typedef double _kkt_value_type;
  _kkt_value_type kkt_value;

   typedef int8_t _solver_status_type;
  _solver_status_type solver_status;

   typedef  ::geometry_msgs::Wrench_<ContainerAllocator>  _external_wrench_type;
  _external_wrench_type external_wrench;

   typedef uint8_t _interaction_type;
  _interaction_type interaction;

   typedef uint8_t _sliding_x_type;
  _sliding_x_type sliding_x;

   typedef uint8_t _sliding_y_type;
  _sliding_y_type sliding_y;

   typedef uint8_t _sliding_yaw_type;
  _sliding_yaw_type sliding_yaw;

   typedef  ::geometry_msgs::Twist_<ContainerAllocator>  _interaction_reference_velocity_type;
  _interaction_reference_velocity_type interaction_reference_velocity;





  typedef boost::shared_ptr< ::mpc::MpcLog_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mpc::MpcLog_<ContainerAllocator> const> ConstPtr;

}; // struct MpcLog_

typedef ::mpc::MpcLog_<std::allocator<void> > MpcLog;

typedef boost::shared_ptr< ::mpc::MpcLog > MpcLogPtr;
typedef boost::shared_ptr< ::mpc::MpcLog const> MpcLogConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mpc::MpcLog_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mpc::MpcLog_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mpc::MpcLog_<ContainerAllocator1> & lhs, const ::mpc::MpcLog_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.pose == rhs.pose &&
    lhs.velocity == rhs.velocity &&
    lhs.control_command_mpc == rhs.control_command_mpc &&
    lhs.horizon_trajectory == rhs.horizon_trajectory &&
    lhs.execution_time == rhs.execution_time &&
    lhs.preparation_time == rhs.preparation_time &&
    lhs.objective_function_value == rhs.objective_function_value &&
    lhs.kkt_value == rhs.kkt_value &&
    lhs.solver_status == rhs.solver_status &&
    lhs.external_wrench == rhs.external_wrench &&
    lhs.interaction == rhs.interaction &&
    lhs.sliding_x == rhs.sliding_x &&
    lhs.sliding_y == rhs.sliding_y &&
    lhs.sliding_yaw == rhs.sliding_yaw &&
    lhs.interaction_reference_velocity == rhs.interaction_reference_velocity;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mpc::MpcLog_<ContainerAllocator1> & lhs, const ::mpc::MpcLog_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mpc

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::mpc::MpcLog_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mpc::MpcLog_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mpc::MpcLog_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mpc::MpcLog_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mpc::MpcLog_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mpc::MpcLog_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mpc::MpcLog_<ContainerAllocator> >
{
  static const char* value()
  {
    return "725215538d96af0b0ca24a15333c8b19";
  }

  static const char* value(const ::mpc::MpcLog_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x725215538d96af0bULL;
  static const uint64_t static_value2 = 0x0ca24a15333c8b19ULL;
};

template<class ContainerAllocator>
struct DataType< ::mpc::MpcLog_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mpc/MpcLog";
  }

  static const char* value(const ::mpc::MpcLog_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mpc::MpcLog_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"\n"
"geometry_msgs/Pose  pose\n"
"geometry_msgs/Twist   velocity\n"
"quadrotor_msgs/ControlCommand   control_command_mpc\n"
"quadrotor_msgs/Trajectory  horizon_trajectory\n"
"float64   execution_time\n"
"float64   preparation_time\n"
"float64   objective_function_value\n"
"float64   kkt_value\n"
"int8      solver_status\n"
"geometry_msgs/Wrench    external_wrench\n"
"bool      interaction\n"
"bool      sliding_x\n"
"bool      sliding_y\n"
"bool      sliding_yaw\n"
"geometry_msgs/Twist   interaction_reference_velocity\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Twist\n"
"# This expresses velocity in free space broken into its linear and angular parts.\n"
"Vector3  linear\n"
"Vector3  angular\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"================================================================================\n"
"MSG: quadrotor_msgs/ControlCommand\n"
"# Quadrotor control command\n"
"\n"
"# control mode enums\n"
"uint8 NONE=0\n"
"uint8 ATTITUDE=1\n"
"uint8 BODY_RATES=2\n"
"uint8 ANGULAR_ACCELERATIONS=3\n"
"uint8 ROTOR_THRUSTS=4\n"
"\n"
"Header header\n"
"\n"
"# Control mode as defined above\n"
"uint8 control_mode\n"
"\n"
"# Flag whether controller is allowed to arm\n"
"bool armed\n"
"\n"
"# Time at which this command should be executed\n"
"time expected_execution_time\n"
"\n"
"# Orientation of the body frame with respect to the world frame [-]\n"
"geometry_msgs/Quaternion orientation\n"
"\n"
"# Body rates in body frame [rad/s]\n"
"# Note that in ATTITUDE mode the x-y-bodyrates are only feed forward terms \n"
"# computed from a reference trajectory\n"
"# Also in ATTITUDE mode, the z-bodyrate has to be from feedback control\n"
"geometry_msgs/Vector3 bodyrates\n"
"\n"
"# Angular accelerations in body frame [rad/s^2]\n"
"geometry_msgs/Vector3 angular_accelerations\n"
"\n"
"# Torques\n"
"geometry_msgs/Vector3 torque\n"
"\n"
"# Collective mass normalized thrust [m/s^2]\n"
"float64 collective_thrust\n"
"\n"
"# Single rotor thrusts [N]\n"
"# These are only considered in the ROTOR_THRUSTS control mode\n"
"float64[] rotor_thrusts\n"
"\n"
"================================================================================\n"
"MSG: quadrotor_msgs/Trajectory\n"
"# Trajectory type enums\n"
"\n"
"# Undefined trajectory type\n"
"uint8 UNDEFINED=0\n"
"\n"
"# General trajectory type that considers orientation from the pose and\n"
"# neglects heading values\n"
"uint8 GENERAL=1\n"
"\n"
"# Trajectory types that compute orientation from acceleration and heading\n"
"# values and consider derivatives up to what is indicated by the name\n"
"uint8 ACCELERATION=2\n"
"uint8 JERK=3\n"
"uint8 SNAP=4\n"
"\n"
"Header header\n"
"\n"
"# Trajectory type as defined above\n"
"uint8 type\n"
"\n"
"quadrotor_msgs/TrajectoryPoint[] points\n"
"\n"
"================================================================================\n"
"MSG: quadrotor_msgs/TrajectoryPoint\n"
"duration time_from_start\n"
"\n"
"geometry_msgs/Pose pose\n"
"\n"
"geometry_msgs/Twist velocity\n"
"\n"
"geometry_msgs/Twist acceleration\n"
"\n"
"geometry_msgs/Twist jerk\n"
"\n"
"geometry_msgs/Twist snap\n"
"\n"
"# Heading angle with respect to world frame [rad]\n"
"float64 heading\n"
"\n"
"# First derivative of the heading angle [rad/s]\n"
"float64 heading_rate\n"
"\n"
"# Second derivative of the heading angle [rad/s^2]\n"
"float64 heading_acceleration\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Wrench\n"
"# This represents force in free space, separated into\n"
"# its linear and angular parts.\n"
"Vector3  force\n"
"Vector3  torque\n"
;
  }

  static const char* value(const ::mpc::MpcLog_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mpc::MpcLog_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.pose);
      stream.next(m.velocity);
      stream.next(m.control_command_mpc);
      stream.next(m.horizon_trajectory);
      stream.next(m.execution_time);
      stream.next(m.preparation_time);
      stream.next(m.objective_function_value);
      stream.next(m.kkt_value);
      stream.next(m.solver_status);
      stream.next(m.external_wrench);
      stream.next(m.interaction);
      stream.next(m.sliding_x);
      stream.next(m.sliding_y);
      stream.next(m.sliding_yaw);
      stream.next(m.interaction_reference_velocity);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MpcLog_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mpc::MpcLog_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mpc::MpcLog_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "pose: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.pose);
    s << indent << "velocity: ";
    s << std::endl;
    Printer< ::geometry_msgs::Twist_<ContainerAllocator> >::stream(s, indent + "  ", v.velocity);
    s << indent << "control_command_mpc: ";
    s << std::endl;
    Printer< ::quadrotor_msgs::ControlCommand_<ContainerAllocator> >::stream(s, indent + "  ", v.control_command_mpc);
    s << indent << "horizon_trajectory: ";
    s << std::endl;
    Printer< ::quadrotor_msgs::Trajectory_<ContainerAllocator> >::stream(s, indent + "  ", v.horizon_trajectory);
    s << indent << "execution_time: ";
    Printer<double>::stream(s, indent + "  ", v.execution_time);
    s << indent << "preparation_time: ";
    Printer<double>::stream(s, indent + "  ", v.preparation_time);
    s << indent << "objective_function_value: ";
    Printer<double>::stream(s, indent + "  ", v.objective_function_value);
    s << indent << "kkt_value: ";
    Printer<double>::stream(s, indent + "  ", v.kkt_value);
    s << indent << "solver_status: ";
    Printer<int8_t>::stream(s, indent + "  ", v.solver_status);
    s << indent << "external_wrench: ";
    s << std::endl;
    Printer< ::geometry_msgs::Wrench_<ContainerAllocator> >::stream(s, indent + "  ", v.external_wrench);
    s << indent << "interaction: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.interaction);
    s << indent << "sliding_x: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.sliding_x);
    s << indent << "sliding_y: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.sliding_y);
    s << indent << "sliding_yaw: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.sliding_yaw);
    s << indent << "interaction_reference_velocity: ";
    s << std::endl;
    Printer< ::geometry_msgs::Twist_<ContainerAllocator> >::stream(s, indent + "  ", v.interaction_reference_velocity);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MPC_MESSAGE_MPCLOG_H

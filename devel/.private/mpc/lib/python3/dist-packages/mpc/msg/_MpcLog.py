# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from mpc/MpcLog.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import genpy
import geometry_msgs.msg
import quadrotor_msgs.msg
import std_msgs.msg

class MpcLog(genpy.Message):
  _md5sum = "725215538d96af0b0ca24a15333c8b19"
  _type = "mpc/MpcLog"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """Header header

geometry_msgs/Pose  pose
geometry_msgs/Twist   velocity
quadrotor_msgs/ControlCommand   control_command_mpc
quadrotor_msgs/Trajectory  horizon_trajectory
float64   execution_time
float64   preparation_time
float64   objective_function_value
float64   kkt_value
int8      solver_status
geometry_msgs/Wrench    external_wrench
bool      interaction
bool      sliding_x
bool      sliding_y
bool      sliding_yaw
geometry_msgs/Twist   interaction_reference_velocity

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: geometry_msgs/Twist
# This expresses velocity in free space broken into its linear and angular parts.
Vector3  linear
Vector3  angular

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z
================================================================================
MSG: quadrotor_msgs/ControlCommand
# Quadrotor control command

# control mode enums
uint8 NONE=0
uint8 ATTITUDE=1
uint8 BODY_RATES=2
uint8 ANGULAR_ACCELERATIONS=3
uint8 ROTOR_THRUSTS=4

Header header

# Control mode as defined above
uint8 control_mode

# Flag whether controller is allowed to arm
bool armed

# Time at which this command should be executed
time expected_execution_time

# Orientation of the body frame with respect to the world frame [-]
geometry_msgs/Quaternion orientation

# Body rates in body frame [rad/s]
# Note that in ATTITUDE mode the x-y-bodyrates are only feed forward terms 
# computed from a reference trajectory
# Also in ATTITUDE mode, the z-bodyrate has to be from feedback control
geometry_msgs/Vector3 bodyrates

# Angular accelerations in body frame [rad/s^2]
geometry_msgs/Vector3 angular_accelerations

# Torques
geometry_msgs/Vector3 torque

# Collective mass normalized thrust [m/s^2]
float64 collective_thrust

# Single rotor thrusts [N]
# These are only considered in the ROTOR_THRUSTS control mode
float64[] rotor_thrusts

================================================================================
MSG: quadrotor_msgs/Trajectory
# Trajectory type enums

# Undefined trajectory type
uint8 UNDEFINED=0

# General trajectory type that considers orientation from the pose and
# neglects heading values
uint8 GENERAL=1

# Trajectory types that compute orientation from acceleration and heading
# values and consider derivatives up to what is indicated by the name
uint8 ACCELERATION=2
uint8 JERK=3
uint8 SNAP=4

Header header

# Trajectory type as defined above
uint8 type

quadrotor_msgs/TrajectoryPoint[] points

================================================================================
MSG: quadrotor_msgs/TrajectoryPoint
duration time_from_start

geometry_msgs/Pose pose

geometry_msgs/Twist velocity

geometry_msgs/Twist acceleration

geometry_msgs/Twist jerk

geometry_msgs/Twist snap

# Heading angle with respect to world frame [rad]
float64 heading

# First derivative of the heading angle [rad/s]
float64 heading_rate

# Second derivative of the heading angle [rad/s^2]
float64 heading_acceleration

================================================================================
MSG: geometry_msgs/Wrench
# This represents force in free space, separated into
# its linear and angular parts.
Vector3  force
Vector3  torque
"""
  __slots__ = ['header','pose','velocity','control_command_mpc','horizon_trajectory','execution_time','preparation_time','objective_function_value','kkt_value','solver_status','external_wrench','interaction','sliding_x','sliding_y','sliding_yaw','interaction_reference_velocity']
  _slot_types = ['std_msgs/Header','geometry_msgs/Pose','geometry_msgs/Twist','quadrotor_msgs/ControlCommand','quadrotor_msgs/Trajectory','float64','float64','float64','float64','int8','geometry_msgs/Wrench','bool','bool','bool','bool','geometry_msgs/Twist']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,pose,velocity,control_command_mpc,horizon_trajectory,execution_time,preparation_time,objective_function_value,kkt_value,solver_status,external_wrench,interaction,sliding_x,sliding_y,sliding_yaw,interaction_reference_velocity

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(MpcLog, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.pose is None:
        self.pose = geometry_msgs.msg.Pose()
      if self.velocity is None:
        self.velocity = geometry_msgs.msg.Twist()
      if self.control_command_mpc is None:
        self.control_command_mpc = quadrotor_msgs.msg.ControlCommand()
      if self.horizon_trajectory is None:
        self.horizon_trajectory = quadrotor_msgs.msg.Trajectory()
      if self.execution_time is None:
        self.execution_time = 0.
      if self.preparation_time is None:
        self.preparation_time = 0.
      if self.objective_function_value is None:
        self.objective_function_value = 0.
      if self.kkt_value is None:
        self.kkt_value = 0.
      if self.solver_status is None:
        self.solver_status = 0
      if self.external_wrench is None:
        self.external_wrench = geometry_msgs.msg.Wrench()
      if self.interaction is None:
        self.interaction = False
      if self.sliding_x is None:
        self.sliding_x = False
      if self.sliding_y is None:
        self.sliding_y = False
      if self.sliding_yaw is None:
        self.sliding_yaw = False
      if self.interaction_reference_velocity is None:
        self.interaction_reference_velocity = geometry_msgs.msg.Twist()
    else:
      self.header = std_msgs.msg.Header()
      self.pose = geometry_msgs.msg.Pose()
      self.velocity = geometry_msgs.msg.Twist()
      self.control_command_mpc = quadrotor_msgs.msg.ControlCommand()
      self.horizon_trajectory = quadrotor_msgs.msg.Trajectory()
      self.execution_time = 0.
      self.preparation_time = 0.
      self.objective_function_value = 0.
      self.kkt_value = 0.
      self.solver_status = 0
      self.external_wrench = geometry_msgs.msg.Wrench()
      self.interaction = False
      self.sliding_x = False
      self.sliding_y = False
      self.sliding_yaw = False
      self.interaction_reference_velocity = geometry_msgs.msg.Twist()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_13d3I().pack(_x.pose.position.x, _x.pose.position.y, _x.pose.position.z, _x.pose.orientation.x, _x.pose.orientation.y, _x.pose.orientation.z, _x.pose.orientation.w, _x.velocity.linear.x, _x.velocity.linear.y, _x.velocity.linear.z, _x.velocity.angular.x, _x.velocity.angular.y, _x.velocity.angular.z, _x.control_command_mpc.header.seq, _x.control_command_mpc.header.stamp.secs, _x.control_command_mpc.header.stamp.nsecs))
      _x = self.control_command_mpc.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2B2I14d().pack(_x.control_command_mpc.control_mode, _x.control_command_mpc.armed, _x.control_command_mpc.expected_execution_time.secs, _x.control_command_mpc.expected_execution_time.nsecs, _x.control_command_mpc.orientation.x, _x.control_command_mpc.orientation.y, _x.control_command_mpc.orientation.z, _x.control_command_mpc.orientation.w, _x.control_command_mpc.bodyrates.x, _x.control_command_mpc.bodyrates.y, _x.control_command_mpc.bodyrates.z, _x.control_command_mpc.angular_accelerations.x, _x.control_command_mpc.angular_accelerations.y, _x.control_command_mpc.angular_accelerations.z, _x.control_command_mpc.torque.x, _x.control_command_mpc.torque.y, _x.control_command_mpc.torque.z, _x.control_command_mpc.collective_thrust))
      length = len(self.control_command_mpc.rotor_thrusts)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.control_command_mpc.rotor_thrusts))
      _x = self
      buff.write(_get_struct_3I().pack(_x.horizon_trajectory.header.seq, _x.horizon_trajectory.header.stamp.secs, _x.horizon_trajectory.header.stamp.nsecs))
      _x = self.horizon_trajectory.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.horizon_trajectory.type
      buff.write(_get_struct_B().pack(_x))
      length = len(self.horizon_trajectory.points)
      buff.write(_struct_I.pack(length))
      for val1 in self.horizon_trajectory.points:
        _v1 = val1.time_from_start
        _x = _v1
        buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
        _v2 = val1.pose
        _v3 = _v2.position
        _x = _v3
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v4 = _v2.orientation
        _x = _v4
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        _v5 = val1.velocity
        _v6 = _v5.linear
        _x = _v6
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v7 = _v5.angular
        _x = _v7
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v8 = val1.acceleration
        _v9 = _v8.linear
        _x = _v9
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v10 = _v8.angular
        _x = _v10
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v11 = val1.jerk
        _v12 = _v11.linear
        _x = _v12
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v13 = _v11.angular
        _x = _v13
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v14 = val1.snap
        _v15 = _v14.linear
        _x = _v15
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v16 = _v14.angular
        _x = _v16
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _x = val1
        buff.write(_get_struct_3d().pack(_x.heading, _x.heading_rate, _x.heading_acceleration))
      _x = self
      buff.write(_get_struct_4db6d4B6d().pack(_x.execution_time, _x.preparation_time, _x.objective_function_value, _x.kkt_value, _x.solver_status, _x.external_wrench.force.x, _x.external_wrench.force.y, _x.external_wrench.force.z, _x.external_wrench.torque.x, _x.external_wrench.torque.y, _x.external_wrench.torque.z, _x.interaction, _x.sliding_x, _x.sliding_y, _x.sliding_yaw, _x.interaction_reference_velocity.linear.x, _x.interaction_reference_velocity.linear.y, _x.interaction_reference_velocity.linear.z, _x.interaction_reference_velocity.angular.x, _x.interaction_reference_velocity.angular.y, _x.interaction_reference_velocity.angular.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.pose is None:
        self.pose = geometry_msgs.msg.Pose()
      if self.velocity is None:
        self.velocity = geometry_msgs.msg.Twist()
      if self.control_command_mpc is None:
        self.control_command_mpc = quadrotor_msgs.msg.ControlCommand()
      if self.horizon_trajectory is None:
        self.horizon_trajectory = quadrotor_msgs.msg.Trajectory()
      if self.external_wrench is None:
        self.external_wrench = geometry_msgs.msg.Wrench()
      if self.interaction_reference_velocity is None:
        self.interaction_reference_velocity = geometry_msgs.msg.Twist()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 116
      (_x.pose.position.x, _x.pose.position.y, _x.pose.position.z, _x.pose.orientation.x, _x.pose.orientation.y, _x.pose.orientation.z, _x.pose.orientation.w, _x.velocity.linear.x, _x.velocity.linear.y, _x.velocity.linear.z, _x.velocity.angular.x, _x.velocity.angular.y, _x.velocity.angular.z, _x.control_command_mpc.header.seq, _x.control_command_mpc.header.stamp.secs, _x.control_command_mpc.header.stamp.nsecs,) = _get_struct_13d3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.control_command_mpc.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.control_command_mpc.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 122
      (_x.control_command_mpc.control_mode, _x.control_command_mpc.armed, _x.control_command_mpc.expected_execution_time.secs, _x.control_command_mpc.expected_execution_time.nsecs, _x.control_command_mpc.orientation.x, _x.control_command_mpc.orientation.y, _x.control_command_mpc.orientation.z, _x.control_command_mpc.orientation.w, _x.control_command_mpc.bodyrates.x, _x.control_command_mpc.bodyrates.y, _x.control_command_mpc.bodyrates.z, _x.control_command_mpc.angular_accelerations.x, _x.control_command_mpc.angular_accelerations.y, _x.control_command_mpc.angular_accelerations.z, _x.control_command_mpc.torque.x, _x.control_command_mpc.torque.y, _x.control_command_mpc.torque.z, _x.control_command_mpc.collective_thrust,) = _get_struct_2B2I14d().unpack(str[start:end])
      self.control_command_mpc.armed = bool(self.control_command_mpc.armed)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.control_command_mpc.rotor_thrusts = s.unpack(str[start:end])
      _x = self
      start = end
      end += 12
      (_x.horizon_trajectory.header.seq, _x.horizon_trajectory.header.stamp.secs, _x.horizon_trajectory.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.horizon_trajectory.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.horizon_trajectory.header.frame_id = str[start:end]
      start = end
      end += 1
      (self.horizon_trajectory.type,) = _get_struct_B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.horizon_trajectory.points = []
      for i in range(0, length):
        val1 = quadrotor_msgs.msg.TrajectoryPoint()
        _v17 = val1.time_from_start
        _x = _v17
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
        _v18 = val1.pose
        _v19 = _v18.position
        _x = _v19
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v20 = _v18.orientation
        _x = _v20
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        _v21 = val1.velocity
        _v22 = _v21.linear
        _x = _v22
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v23 = _v21.angular
        _x = _v23
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v24 = val1.acceleration
        _v25 = _v24.linear
        _x = _v25
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v26 = _v24.angular
        _x = _v26
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v27 = val1.jerk
        _v28 = _v27.linear
        _x = _v28
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v29 = _v27.angular
        _x = _v29
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v30 = val1.snap
        _v31 = _v30.linear
        _x = _v31
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v32 = _v30.angular
        _x = _v32
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _x = val1
        start = end
        end += 24
        (_x.heading, _x.heading_rate, _x.heading_acceleration,) = _get_struct_3d().unpack(str[start:end])
        self.horizon_trajectory.points.append(val1)
      _x = self
      start = end
      end += 133
      (_x.execution_time, _x.preparation_time, _x.objective_function_value, _x.kkt_value, _x.solver_status, _x.external_wrench.force.x, _x.external_wrench.force.y, _x.external_wrench.force.z, _x.external_wrench.torque.x, _x.external_wrench.torque.y, _x.external_wrench.torque.z, _x.interaction, _x.sliding_x, _x.sliding_y, _x.sliding_yaw, _x.interaction_reference_velocity.linear.x, _x.interaction_reference_velocity.linear.y, _x.interaction_reference_velocity.linear.z, _x.interaction_reference_velocity.angular.x, _x.interaction_reference_velocity.angular.y, _x.interaction_reference_velocity.angular.z,) = _get_struct_4db6d4B6d().unpack(str[start:end])
      self.interaction = bool(self.interaction)
      self.sliding_x = bool(self.sliding_x)
      self.sliding_y = bool(self.sliding_y)
      self.sliding_yaw = bool(self.sliding_yaw)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_13d3I().pack(_x.pose.position.x, _x.pose.position.y, _x.pose.position.z, _x.pose.orientation.x, _x.pose.orientation.y, _x.pose.orientation.z, _x.pose.orientation.w, _x.velocity.linear.x, _x.velocity.linear.y, _x.velocity.linear.z, _x.velocity.angular.x, _x.velocity.angular.y, _x.velocity.angular.z, _x.control_command_mpc.header.seq, _x.control_command_mpc.header.stamp.secs, _x.control_command_mpc.header.stamp.nsecs))
      _x = self.control_command_mpc.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2B2I14d().pack(_x.control_command_mpc.control_mode, _x.control_command_mpc.armed, _x.control_command_mpc.expected_execution_time.secs, _x.control_command_mpc.expected_execution_time.nsecs, _x.control_command_mpc.orientation.x, _x.control_command_mpc.orientation.y, _x.control_command_mpc.orientation.z, _x.control_command_mpc.orientation.w, _x.control_command_mpc.bodyrates.x, _x.control_command_mpc.bodyrates.y, _x.control_command_mpc.bodyrates.z, _x.control_command_mpc.angular_accelerations.x, _x.control_command_mpc.angular_accelerations.y, _x.control_command_mpc.angular_accelerations.z, _x.control_command_mpc.torque.x, _x.control_command_mpc.torque.y, _x.control_command_mpc.torque.z, _x.control_command_mpc.collective_thrust))
      length = len(self.control_command_mpc.rotor_thrusts)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.control_command_mpc.rotor_thrusts.tostring())
      _x = self
      buff.write(_get_struct_3I().pack(_x.horizon_trajectory.header.seq, _x.horizon_trajectory.header.stamp.secs, _x.horizon_trajectory.header.stamp.nsecs))
      _x = self.horizon_trajectory.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.horizon_trajectory.type
      buff.write(_get_struct_B().pack(_x))
      length = len(self.horizon_trajectory.points)
      buff.write(_struct_I.pack(length))
      for val1 in self.horizon_trajectory.points:
        _v33 = val1.time_from_start
        _x = _v33
        buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
        _v34 = val1.pose
        _v35 = _v34.position
        _x = _v35
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v36 = _v34.orientation
        _x = _v36
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        _v37 = val1.velocity
        _v38 = _v37.linear
        _x = _v38
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v39 = _v37.angular
        _x = _v39
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v40 = val1.acceleration
        _v41 = _v40.linear
        _x = _v41
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v42 = _v40.angular
        _x = _v42
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v43 = val1.jerk
        _v44 = _v43.linear
        _x = _v44
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v45 = _v43.angular
        _x = _v45
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v46 = val1.snap
        _v47 = _v46.linear
        _x = _v47
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v48 = _v46.angular
        _x = _v48
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _x = val1
        buff.write(_get_struct_3d().pack(_x.heading, _x.heading_rate, _x.heading_acceleration))
      _x = self
      buff.write(_get_struct_4db6d4B6d().pack(_x.execution_time, _x.preparation_time, _x.objective_function_value, _x.kkt_value, _x.solver_status, _x.external_wrench.force.x, _x.external_wrench.force.y, _x.external_wrench.force.z, _x.external_wrench.torque.x, _x.external_wrench.torque.y, _x.external_wrench.torque.z, _x.interaction, _x.sliding_x, _x.sliding_y, _x.sliding_yaw, _x.interaction_reference_velocity.linear.x, _x.interaction_reference_velocity.linear.y, _x.interaction_reference_velocity.linear.z, _x.interaction_reference_velocity.angular.x, _x.interaction_reference_velocity.angular.y, _x.interaction_reference_velocity.angular.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.pose is None:
        self.pose = geometry_msgs.msg.Pose()
      if self.velocity is None:
        self.velocity = geometry_msgs.msg.Twist()
      if self.control_command_mpc is None:
        self.control_command_mpc = quadrotor_msgs.msg.ControlCommand()
      if self.horizon_trajectory is None:
        self.horizon_trajectory = quadrotor_msgs.msg.Trajectory()
      if self.external_wrench is None:
        self.external_wrench = geometry_msgs.msg.Wrench()
      if self.interaction_reference_velocity is None:
        self.interaction_reference_velocity = geometry_msgs.msg.Twist()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 116
      (_x.pose.position.x, _x.pose.position.y, _x.pose.position.z, _x.pose.orientation.x, _x.pose.orientation.y, _x.pose.orientation.z, _x.pose.orientation.w, _x.velocity.linear.x, _x.velocity.linear.y, _x.velocity.linear.z, _x.velocity.angular.x, _x.velocity.angular.y, _x.velocity.angular.z, _x.control_command_mpc.header.seq, _x.control_command_mpc.header.stamp.secs, _x.control_command_mpc.header.stamp.nsecs,) = _get_struct_13d3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.control_command_mpc.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.control_command_mpc.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 122
      (_x.control_command_mpc.control_mode, _x.control_command_mpc.armed, _x.control_command_mpc.expected_execution_time.secs, _x.control_command_mpc.expected_execution_time.nsecs, _x.control_command_mpc.orientation.x, _x.control_command_mpc.orientation.y, _x.control_command_mpc.orientation.z, _x.control_command_mpc.orientation.w, _x.control_command_mpc.bodyrates.x, _x.control_command_mpc.bodyrates.y, _x.control_command_mpc.bodyrates.z, _x.control_command_mpc.angular_accelerations.x, _x.control_command_mpc.angular_accelerations.y, _x.control_command_mpc.angular_accelerations.z, _x.control_command_mpc.torque.x, _x.control_command_mpc.torque.y, _x.control_command_mpc.torque.z, _x.control_command_mpc.collective_thrust,) = _get_struct_2B2I14d().unpack(str[start:end])
      self.control_command_mpc.armed = bool(self.control_command_mpc.armed)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.control_command_mpc.rotor_thrusts = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      _x = self
      start = end
      end += 12
      (_x.horizon_trajectory.header.seq, _x.horizon_trajectory.header.stamp.secs, _x.horizon_trajectory.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.horizon_trajectory.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.horizon_trajectory.header.frame_id = str[start:end]
      start = end
      end += 1
      (self.horizon_trajectory.type,) = _get_struct_B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.horizon_trajectory.points = []
      for i in range(0, length):
        val1 = quadrotor_msgs.msg.TrajectoryPoint()
        _v49 = val1.time_from_start
        _x = _v49
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
        _v50 = val1.pose
        _v51 = _v50.position
        _x = _v51
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v52 = _v50.orientation
        _x = _v52
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        _v53 = val1.velocity
        _v54 = _v53.linear
        _x = _v54
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v55 = _v53.angular
        _x = _v55
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v56 = val1.acceleration
        _v57 = _v56.linear
        _x = _v57
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v58 = _v56.angular
        _x = _v58
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v59 = val1.jerk
        _v60 = _v59.linear
        _x = _v60
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v61 = _v59.angular
        _x = _v61
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v62 = val1.snap
        _v63 = _v62.linear
        _x = _v63
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v64 = _v62.angular
        _x = _v64
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _x = val1
        start = end
        end += 24
        (_x.heading, _x.heading_rate, _x.heading_acceleration,) = _get_struct_3d().unpack(str[start:end])
        self.horizon_trajectory.points.append(val1)
      _x = self
      start = end
      end += 133
      (_x.execution_time, _x.preparation_time, _x.objective_function_value, _x.kkt_value, _x.solver_status, _x.external_wrench.force.x, _x.external_wrench.force.y, _x.external_wrench.force.z, _x.external_wrench.torque.x, _x.external_wrench.torque.y, _x.external_wrench.torque.z, _x.interaction, _x.sliding_x, _x.sliding_y, _x.sliding_yaw, _x.interaction_reference_velocity.linear.x, _x.interaction_reference_velocity.linear.y, _x.interaction_reference_velocity.linear.z, _x.interaction_reference_velocity.angular.x, _x.interaction_reference_velocity.angular.y, _x.interaction_reference_velocity.angular.z,) = _get_struct_4db6d4B6d().unpack(str[start:end])
      self.interaction = bool(self.interaction)
      self.sliding_x = bool(self.sliding_x)
      self.sliding_y = bool(self.sliding_y)
      self.sliding_yaw = bool(self.sliding_yaw)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_13d3I = None
def _get_struct_13d3I():
    global _struct_13d3I
    if _struct_13d3I is None:
        _struct_13d3I = struct.Struct("<13d3I")
    return _struct_13d3I
_struct_2B2I14d = None
def _get_struct_2B2I14d():
    global _struct_2B2I14d
    if _struct_2B2I14d is None:
        _struct_2B2I14d = struct.Struct("<2B2I14d")
    return _struct_2B2I14d
_struct_2i = None
def _get_struct_2i():
    global _struct_2i
    if _struct_2i is None:
        _struct_2i = struct.Struct("<2i")
    return _struct_2i
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
_struct_4d = None
def _get_struct_4d():
    global _struct_4d
    if _struct_4d is None:
        _struct_4d = struct.Struct("<4d")
    return _struct_4d
_struct_4db6d4B6d = None
def _get_struct_4db6d4B6d():
    global _struct_4db6d4B6d
    if _struct_4db6d4B6d is None:
        _struct_4db6d4B6d = struct.Struct("<4db6d4B6d")
    return _struct_4db6d4B6d
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
